package com.camonoxe.View;
//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.apache.commons.lang3.StringUtils;

import com.camonoxe.Model.MessageLogs;
import com.camonoxe.Model.SendMessageDel;
import com.camonoxe.Model.UpdateMessagesDel;
import com.camonoxe.Model.UserTable;
import com.camonoxe.Model.UserTable.User;
import com.camonoxe.Model.UsersChangedDel;

public class GUI extends JFrame implements UpdateMessagesDel, WindowStateListener, UsersChangedDel {
    private JList<UserEnvelope> uxParticipants;
    private DefaultListModel<UserEnvelope> participantsList;
    private JTextPane uxMessages;
    private JTextArea uxText;
    private KeyAdapter sharedKeyAdapter;
    private SendMessageDel sendMessageDel;

    private UUID userOnDisplay;

    private boolean isAlive;
    
    private static final int CHAT_ROW_LIMIT = 4;

    public GUI(String name, SendMessageDel del) {
        sendMessageDel = del;
        participantsList = new DefaultListModel<>();
        userOnDisplay = null;
        setTitle(name);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(new Dimension(700, 600));
        addWindowStateListener(this);

        JPanel panel = new JPanel();
        panel.setPreferredSize(new Dimension(700, 600));
        panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        panel.setLayout(new BorderLayout(5, 5));
        JPanel rightPanel = new JPanel(new BorderLayout(5,5));
        rightPanel.setBorder(new EmptyBorder(5, 5, 5, 5));

        uxText = new JTextArea();
        uxText.addKeyListener(new KeyAdapter() {
            Set<Integer> keysHeld = new HashSet<Integer>();

            public void keyPressed(KeyEvent e)
            {
                if (keysHeld.contains(e.getKeyCode())) return;
                keysHeld.add(e.getKeyCode());
                if (e.getKeyCode() == KeyEvent.VK_ENTER && e.getModifiersEx() != KeyEvent.SHIFT_DOWN_MASK)
                {
                    e.consume();
                    attemptSendMessage();
                }
                if (e.getKeyCode() == KeyEvent.VK_ENTER && e.getModifiersEx() == KeyEvent.SHIFT_DOWN_MASK)
                {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            uxText.insert("\n", uxText.getCaretPosition());
                        }
                    });
                }
            }

            public void keyReleased(KeyEvent e)
            {
                keysHeld.remove(e.getKeyCode());
            }
        });

        uxParticipants = new JList<UserEnvelope>(participantsList);
        uxParticipants.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
        uxParticipants.setPreferredSize(new Dimension(200, 0));
        uxParticipants.setMinimumSize(new Dimension(200, 0));
        uxParticipants.setCellRenderer(new ClientCellRenderer());
        uxParticipants.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (participantsList.size() == 0 || uxParticipants.getSelectedIndex() == -1) return;
                UserEnvelope ue = participantsList.get(uxParticipants.getSelectedIndex());
                userOnDisplay = ue.getUser().getUserId();
                NewMessageHandler(userOnDisplay);
            }
            
        });
        JScrollPane scrollParty = new JScrollPane(uxParticipants);

        uxMessages = new JTextPane();
        uxMessages.setEditable(false);
        //uxMessages.setLineWrap(true);
        //uxMessages.setWrapStyleWord(true);
        uxText.setRows(CHAT_ROW_LIMIT);
        JScrollPane scrollMessages = new JScrollPane(uxMessages);
        rightPanel.add(scrollMessages, BorderLayout.CENTER);

        JScrollPane scrollText = new JScrollPane(uxText);
        rightPanel.add(scrollText, BorderLayout.SOUTH);

        JSplitPane jsplitpane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, scrollParty, rightPanel);

        panel.add(jsplitpane, BorderLayout.CENTER);
        
        sharedKeyAdapter = new KeyAdapter() {
            Set<Integer> keysHeld = new HashSet<Integer>();

            public void keyPressed(KeyEvent e)
            {
                if (keysHeld.contains(e.getKeyCode())) return;
                keysHeld.add(e.getKeyCode());
                if (e.getKeyCode() == KeyEvent.VK_ENTER)
                {
                    attemptSendMessage();
                }
            }

            public void keyReleased(KeyEvent e)
            {
                keysHeld.remove(e.getKeyCode());
            }
        };
        uxParticipants.addKeyListener(sharedKeyAdapter);
        uxMessages.addKeyListener(sharedKeyAdapter);

        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        JMenu connectMenu = new JMenu("Connect");
        menuBar.add(fileMenu);
        menuBar.add(connectMenu);
        setJMenuBar(menuBar);
        add(panel);
        pack();
        setVisible(true);
        isAlive = true;
    }

    private void attemptSendMessage()
    {
        if (StringUtils.isBlank(uxText.getText())) return;
        sendMessageDel.MessageHandler(userOnDisplay, uxText.getText());
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                uxText.setText("");
            }
        });
    }

    public void setDelegates(SendMessageDel sendMessageDel)
    {
        this.sendMessageDel = sendMessageDel;
    }

    @Override
    public void windowStateChanged(WindowEvent e) {
        if (e.getNewState() == WindowEvent.WINDOW_CLOSING)
        {
            isAlive = false;
        }
    }

    public boolean isAlive()
    {
        return isAlive;
    }

    private UserEnvelope getUserEnvByUserId(UUID userId)
    {
        for (int i = 0; i < participantsList.size(); i++) {
            UserEnvelope ue = participantsList.get(i);
            if (ue.getUser().getUserId().compareTo(userId) == 0) 
                return ue;           
        }
        return null;
    }

    @Override
    public void NewMessageHandler(UUID userId) {
        if (userId != userOnDisplay)
        {
            refreshMessageBox(userId);
        }
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                uxMessages.setText(String.join("\n", MessageLogs.getMessagesByUserId(userOnDisplay)));
            }
        });
    }

    private void refreshMessageBox(UUID userId) {
        getUserEnvByUserId(userId).newMessages();
    }

    @Override
    public void addUserDel(UUID userId) {
        UserEnvelope ue = new UserEnvelope(UserTable.getUserByUserId(userId));
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                participantsList.addElement(ue);
            }
        });
    }

    @Override
    public void remUserDel(UUID userId) {
        UserEnvelope ue = new UserEnvelope(UserTable.getUserByUserId(userId));
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                participantsList.removeElement(ue);
            }
        });
    }
}

class UserEnvelope {
    private User user;
    private boolean newMessages;

    public UserEnvelope(User user)
    {
        this.user = user;
        newMessages = false;
    }

    public void newMessages() { newMessages = true; }
    public void readMessages() { newMessages = false; }
    public boolean hasNewMessages() { return newMessages; }

    public User getUser() { return user; }

    @Override
    public String toString()
    {
        return user.toString();
    }

    @Override
    public boolean equals(Object other)
    {
        UserEnvelope ue = (UserEnvelope) other;
        if (ue == null) return false;
        return user.equals(ue.user);
    }
}

class ClientCellRenderer implements ListCellRenderer<UserEnvelope> {
    ImageIcon unreadIcon;
    ImageIcon readIcon;
    DefaultListCellRenderer renderer;

    public ClientCellRenderer()
    {
        renderer = new DefaultListCellRenderer();
        unreadIcon = new ImageIcon(GUI.class.getClassLoader().getResource("unread.png"));
        readIcon = new ImageIcon(GUI.class.getClassLoader().getResource("read.png"));
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends UserEnvelope> list, UserEnvelope value, int index, boolean isSelected, boolean cellHasFocus) {
        renderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        if (value.hasNewMessages())
        {
            renderer.setIcon(unreadIcon);
        } else {
            renderer.setIcon(readIcon);
        }
        renderer.setEnabled(list.isEnabled());
        renderer.setOpaque(true);
        return renderer;
    }
}